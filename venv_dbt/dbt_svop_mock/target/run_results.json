{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.2", "generated_at": "2025-06-24T09:35:17.915337Z", "invocation_id": "b7fb5a91-2bac-4875-a4a7-275b96bf2e38", "invocation_started_at": "2025-06-24T09:35:00.179653Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-24T09:35:05.499940Z", "completed_at": "2025-06-24T09:35:05.514944Z"}, {"name": "execute", "started_at": "2025-06-24T09:35:05.514944Z", "completed_at": "2025-06-24T09:35:07.355527Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.859588861465454, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "us-central1", "project_id": "peters-datasets", "job_id": "97809869-63ea-4980-94f5-bcb97c769f1e", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.dbt_svop_mock.vw_dim_customer", "compiled": true, "compiled_code": "\n/*\n    This view is used to create the dim_customer table\n    For each unique customer_id, this object will store name, first_seen_date and last_seen_date and their latest activity state location\n*/\nwith cte_customer as (\n    select\n        customer_id\n        , min(event_date) as first_seen_date\n        , max(event_date) as last_seen_date \n        , null customer_first_name\n        , null customer_last_name\n        , to_hex(md5(concat(\n            COALESCE(CAST(CTE.customer_id AS STRING),''),'||'\n        ))) sys_record_checksum\n        , current_datetime('Australia/Sydney') sys_insert_datetime\n    from `peters-datasets`.`dbt_svop_mock_schema_landing`.`policy_events` cte\n    group by 1,sys_record_checksum, sys_insert_datetime\n)\n/*\n    FOR EACH CUSTOMER, TAKE THE LATEST STATE THAT THEY CARRIED OUT ACTIVITY\n*/\n, cte_customer_latest_location as(\n    select\n        *\n    from(\n        select  \n            customer_id\n            , state last_seen_state\n            , row_number() over (partition by customer_id order by event_date desc) as instance\n        from `peters-datasets`.`dbt_svop_mock_schema_landing`.`policy_events`\n    )\n    where instance = 1 \n)\n\nselect\n    -- customer_surkey.dim_customer_sk\n    cc.customer_id\n    , cc.customer_first_name\n    , cc.customer_last_name\n    , cc.first_seen_date\n    , cc.last_seen_date\n    , cll.last_seen_state\n    , cc.sys_record_checksum\n    , cc.sys_insert_datetime\nfrom cte_customer cc\nleft join cte_customer_latest_location  cll\n    on cc.customer_id = cll.customer_id", "relation_name": "`peters-datasets`.`dbt_svop_mock_schema_presentation`.`vw_dim_customer`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-24T09:35:05.510942Z", "completed_at": "2025-06-24T09:35:05.534998Z"}, {"name": "execute", "started_at": "2025-06-24T09:35:05.545007Z", "completed_at": "2025-06-24T09:35:07.357528Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.8605892658233643, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "us-central1", "project_id": "peters-datasets", "job_id": "517aa81e-fe93-4f1b-83f1-360e37212fa1", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.dbt_svop_mock.vw_dim_policy", "compiled": true, "compiled_code": "\n/*\n    This view is used to create the dim_policy table\n    For each unique policy_id, we want to know the first_event_date and last_event_date\n*/\nwith cte_policy as (\n    select\n        policy_id\n        , min(event_date) as first_event_date\n        , max(event_date) as last_event_date \n        , to_hex(md5(concat(\n            COALESCE(CAST(CTE.customer_id AS STRING),''),'||'\n        ))) sys_record_checksum\n        , current_datetime('Australia/Sydney') sys_insert_datetime\n    from `peters-datasets`.`dbt_svop_mock_schema_landing`.`policy_events` cte\n    group by 1, sys_record_checksum, sys_insert_datetime\n)\n\nselect \n        -- dim_policy_sk\n        cp.policy_id\n        , cp.first_event_date\n        , cp.last_event_date \n        , cp.sys_record_checksum\n        , cp.sys_insert_datetime\nfrom cte_policy cp", "relation_name": "`peters-datasets`.`dbt_svop_mock_schema_presentation`.`vw_dim_policy`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-24T09:35:07.367057Z", "completed_at": "2025-06-24T09:35:07.374059Z"}, {"name": "execute", "started_at": "2025-06-24T09:35:07.375060Z", "completed_at": "2025-06-24T09:35:08.998923Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6348659992218018, "adapter_response": {"_message": "CREATE VIEW (0 processed)", "code": "CREATE VIEW", "bytes_processed": 0, "bytes_billed": 0, "location": "us-central1", "project_id": "peters-datasets", "job_id": "913fb082-61e0-4885-8dee-f14f2b5f09a2", "slot_ms": 0}, "message": "CREATE VIEW (0 processed)", "failures": null, "unique_id": "model.dbt_svop_mock.vw_fact_customer_policies", "compiled": true, "compiled_code": "with cte_customer_policies as (\n    select\n        policy_id\n        , event_type\n        , event_date\n        , customer_id\n        , channel\n        , premium_amount\n        , state\n        /*\n            creating sys_attributes\n        */\n        , to_hex(md5(concat(\n            COALESCE(CAST(CTE.policy_id AS STRING),''),'||',\n            COALESCE(CAST(CTE.event_type AS STRING),''),'||',\n            COALESCE(CAST(CTE.event_date AS STRING),''),'||',\n            COALESCE(CAST(CTE.customer_id AS STRING),''),'||',\n            COALESCE(CAST(CTE.channel AS STRING),''),'||',\n            COALESCE(CAST(CTE.premium_amount AS STRING),''),'||',\n            COALESCE(CAST(CTE.state AS STRING),''),'||'\n        ))) sys_record_checksum\n        , current_datetime('Australia/Sydney') sys_insert_datetime\n    from `peters-datasets`.`dbt_svop_mock_schema_landing`.`policy_events` cte\n)\n/*\n    for each policy, identifying the minimum date for each event\n    row_number() logic can be used, however, as data scales, this function can become costly to process\n*/\n, cte_first_event_date as(\n    select\n        policy_id\n        /*\n            Calculating first instance of each event\n        */\n        , min(case when lower(event_type) = 'quote' then event_date end) first_quote_date\n        , min(case when lower(event_type) = 'bind' then event_date end) first_bind_date\n        , min(case when lower(event_type) = 'cancel' then event_date end) first_cancel_date\n        /*\n            determining time between specified events\n        */\n        , date_diff(min(case when lower(event_type) = 'bind' then event_date end), min(case when lower(event_type) = 'quote' then event_date end), DAY) quote_to_bind_days\n        , date_diff(min(case when lower(event_type) = 'cancel' then event_date end), min(case when lower(event_type) = 'bind' then event_date end), DAY) bind_to_cancel_days\n    from `peters-datasets`.`dbt_svop_mock_schema_landing`.`policy_events`\n    group by 1\n)\n\nselect distinct\n    -- fact_customer_policies_sk\n    cp.policy_id\n    , cp.event_type\n    , cp.event_date\n    , cp.customer_id\n    , cp.channel\n    , cp.premium_amount\n    , cp.state\n    /*\n        flagging first instance of each event\n    */\n    , case when fed_q.first_quote_date is not null then 1 else 0 end as is_first_quote\n    , case when fed_b.first_bind_date is not null then 1 else 0 end as is_first_bind\n    , case when fed_c.first_cancel_date is not null then 1 else 0 end as is_first_cancel\n    /*\n        not considering below cases, as this dirty data will skew the results:\n        - binds happen before quotes\n        - cancels happen before binds \n    */\n    , case when fed.quote_to_bind_days < 0 then 0 else fed.quote_to_bind_days end quote_to_bind_days\n    , case when fed.bind_to_cancel_days < 0 then 0 else fed.bind_to_cancel_days end bind_to_cancel_days\n    /*\n        general calculation of time between sequential events\n    */\n    , DATE_DIFF(LEAD(event_date) over (partition by cp.policy_id order by event_date), event_date, DAY) days_until_to_next_event\n    , DATE_DIFF(event_date,LAG(event_date) over (partition by cp.policy_id order by event_date), DAY) days_since_last_event\n    , cp.sys_record_checksum\n    , cp.sys_insert_datetime\nfrom cte_customer_policies cp\nleft join cte_first_event_date fed_q\n    on cp.policy_id = fed_q.policy_id\n    and cp.event_date = fed_q.first_quote_date\n    and lower(cp.event_type) = 'quote'\nleft join cte_first_event_date fed_b\n    on cp.policy_id = fed_b.policy_id\n    and cp.event_date = fed_b.first_bind_date\n    and lower(cp.event_type) = 'bind'\nleft join cte_first_event_date fed_c\n    on cp.policy_id = fed_c.policy_id\n    and cp.event_date = fed_c.first_cancel_date\n    and lower(cp.event_type) = 'cancel'\nleft join cte_first_event_date fed\n    on cp.policy_id = fed.policy_id", "relation_name": "`peters-datasets`.`dbt_svop_mock_schema_presentation`.`vw_fact_customer_policies`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-24T09:35:09.004924Z", "completed_at": "2025-06-24T09:35:09.008925Z"}, {"name": "execute", "started_at": "2025-06-24T09:35:09.009926Z", "completed_at": "2025-06-24T09:35:12.786776Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.7838516235351562, "adapter_response": {"_message": "MERGE (100.0 rows, 15.9 KiB processed)", "code": "MERGE", "rows_affected": 100, "bytes_processed": 16320, "bytes_billed": 20971520, "location": "us-central1", "project_id": "peters-datasets", "job_id": "3616af82-e7f8-401b-9030-278844b57fa0", "slot_ms": 11905}, "message": "MERGE (100.0 rows, 15.9 KiB processed)", "failures": null, "unique_id": "model.dbt_svop_mock.dim_policy", "compiled": true, "compiled_code": "-- \n\nwith cte_policy as (\n    select\n        -- dim_policy_sk\n        policy_id\n        , first_event_date\n        , last_event_date\n        , sys_record_checksum\n        , sys_insert_datetime\n    from `peters-datasets`.`dbt_svop_mock_schema_presentation`.`vw_dim_policy`\n)\n\nselect \n    *\nfrom cte_policy", "relation_name": "`peters-datasets`.`dbt_svop_mock_schema_presentation`.`dim_policy`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-24T09:35:12.791776Z", "completed_at": "2025-06-24T09:35:12.795777Z"}, {"name": "execute", "started_at": "2025-06-24T09:35:12.795777Z", "completed_at": "2025-06-24T09:35:17.155183Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 4.365406513214111, "adapter_response": {"_message": "MERGE (405.0 rows, 75.3 KiB processed)", "code": "MERGE", "rows_affected": 405, "bytes_processed": 77154, "bytes_billed": 20971520, "location": "us-central1", "project_id": "peters-datasets", "job_id": "00b623ed-f22d-4a7e-b37d-5183d8273335", "slot_ms": 56949}, "message": "MERGE (405.0 rows, 75.3 KiB processed)", "failures": null, "unique_id": "model.dbt_svop_mock.fact_customer_policies", "compiled": true, "compiled_code": "-- \n\n\nwith cte_customer_policies as (\n    select\n        policy_id,\n        event_type,\n        event_date,\n        customer_id,\n        channel,\n        premium_amount,\n        state,\n        is_first_quote,\n        is_first_bind,\n        is_first_cancel,\n        quote_to_bind_days,\n        bind_to_cancel_days,\n        days_until_to_next_event,\n        days_since_last_event,\n        sys_record_checksum,\n        sys_insert_datetime\n    from `peters-datasets`.`dbt_svop_mock_schema_presentation`.`vw_fact_customer_policies` cte\n)\n\nselect \n    policy_id,\n        event_type,\n        event_date,\n        customer_id,\n        channel,\n        premium_amount,\n        state,\n        is_first_quote,\n        is_first_bind,\n        is_first_cancel,\n        quote_to_bind_days,\n        bind_to_cancel_days,\n        days_until_to_next_event,\n        days_since_last_event,\n        sys_record_checksum,\n        sys_insert_datetime\nfrom cte_customer_policies", "relation_name": "`peters-datasets`.`dbt_svop_mock_schema_presentation`.`fact_customer_policies`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-24T09:35:07.371058Z", "completed_at": "2025-06-24T09:35:07.378059Z"}, {"name": "execute", "started_at": "2025-06-24T09:35:07.378059Z", "completed_at": "2025-06-24T09:35:17.906384Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 10.541327238082886, "adapter_response": {"_message": "MERGE (100.0 rows, 15.1 KiB processed)", "code": "MERGE", "rows_affected": 100, "bytes_processed": 15430, "bytes_billed": 20971520, "location": "us-central1", "project_id": "peters-datasets", "job_id": "275cb876-aefe-4ea2-b10e-4c6daaaffac9", "slot_ms": 22373}, "message": "MERGE (100.0 rows, 15.1 KiB processed)", "failures": null, "unique_id": "model.dbt_svop_mock.dim_customer", "compiled": true, "compiled_code": "-- \n\n\nwith cte_customer as (\n    select\n        -- dim_customer_sk\n        customer_id\n        , customer_first_name\n        , customer_last_name\n        , first_seen_date\n        , last_seen_date\n        , last_seen_state\n        , sys_record_checksum\n        , sys_insert_datetime\n    from `peters-datasets`.`dbt_svop_mock_schema_presentation`.`vw_dim_customer` cte\n)\n\nselect *\nfrom cte_customer", "relation_name": "`peters-datasets`.`dbt_svop_mock_schema_presentation`.`dim_customer`", "batch_results": null}], "elapsed_time": 14.153390884399414, "args": {"static_parser": true, "require_batched_execution_for_custom_microbatch_strategy": false, "source_freshness_run_project_hooks": true, "log_path": "C:\\Users\\Peter Duong\\Desktop\\learning\\PythonProjects\\SVoP_Mock\\venv_dbt\\dbt_svop_mock\\logs", "require_yaml_configuration_for_mf_time_spines": false, "validate_macro_args": false, "log_file_max_bytes": 10485760, "introspect": true, "defer": false, "warn_error_options": {"error": [], "warn": [], "silence": []}, "log_level": "info", "profiles_dir": "C:\\Users\\Peter Duong\\.dbt", "log_level_file": "debug", "which": "run", "populate_cache": true, "state_modified_compare_vars": false, "state_modified_compare_more_unrendered_values": false, "vars": {}, "invocation_command": "dbt run", "strict_mode": false, "version_check": true, "printer_width": 80, "require_all_warnings_handled_by_warn_error": false, "use_fast_test_edges": false, "select": [], "skip_nodes_if_on_run_start_fails": false, "require_explicit_package_overrides_for_builtin_materializations": true, "require_nested_cumulative_type_params": false, "macro_debugging": false, "log_format": "default", "upload_to_artifacts_ingest_api": false, "favor_state": false, "project_dir": "C:\\Users\\Peter Duong\\Desktop\\learning\\PythonProjects\\SVoP_Mock\\venv_dbt\\dbt_svop_mock", "require_resource_names_without_spaces": true, "empty": false, "use_colors": true, "send_anonymous_usage_stats": true, "cache_selected_only": false, "print": true, "log_format_file": "debug", "write_json": true, "partial_parse_file_diff": true, "indirect_selection": "eager", "quiet": false, "show_resource_report": false, "exclude": [], "partial_parse": true, "use_colors_file": true, "show_all_deprecations": false}}